/******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

// Import required modules
var fs = require('fs');
var express = require('express');

// Create an instance of the Express app
var app = express();

// Enable Cross-Origin Resource Sharing (CORS) if not disabled
if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    // Check if the origin is allowed, and set Access-Control-Allow-Origin header accordingly
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    // Move on to the next middleware function
    next();
  });
}

// Serve static files from the 'public' directory
app.use('/public', express.static(process.cwd() + '/public'));

// Set up a route to serve the package.json file
app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    // Read the package.json file and send it as a response
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
// Set up the root route to serve the index.html file
app.route('/')
    .get(function(req, res) {
      res.sendFile(process.cwd() + '/views/index.html');
    })

// Respond with "Not found" for all other routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error middleware to handle errors
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

// Start the server and listen on the specified port
const listener = app.listen(process.env.PORT || 3000, function () {
  console.log("Node.js listening on port " + listener.address().port);
});

// Create an instance of the Express application
// const app = express();

// Create a GET route at the path '/json'
app.get('/json', (req, res) => {
  // Create a JavaScript object
  const obj = {
    message: 'Hello json'
  };
  // Send the object as a JSON response
  res.json(obj);
});
